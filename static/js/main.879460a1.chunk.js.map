{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","style","backgroundColor","color","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","Text","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","about","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.879460a1.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom' ;\r\nexport default function Navbar(props) {\r\n    return (\r\n     \r\n           <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} >\r\n            <div className=\"container-fluid\">\r\n              <a className=\"navbar-brand\" href=\"/\"> {props.title} </a>\r\n              <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n              </button>\r\n              <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                  <li className=\"nav-item\">\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    {/* <a className=\"nav-link\" href=\"/\"> {props.about} </a> */}\r\n                     </li><a className=\"nav-link\" href=\"/\"> About </a>\r\n                  \r\n                </ul>\r\n                      <div className={`form-check form-switch text-${props.mode=== 'light'? 'dark' : 'light'}`}>\r\n                <input className= \"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id= \"flexSwitchCheckDefault\" />\r\n                <label className= \"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode=== 'light'? 'Dark' : 'Light'} Mode </label>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n      </nav>\r\n    );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title : \"Set Title\",\r\n    about: \"About\"\r\n};","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\",\"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\",\"success\");\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const removeExtraSpaces = () => {\r\n        let newText =text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra Spaces Removed\",\"success\");\r\n    }\r\n    const copyText = () => {\r\n        var Text=document.getElementById('myBox');\r\n        Text.select();\r\n        navigator.clipboard.writeText(Text.value);\r\n        props.showAlert(\"Text Copied\",\"success\");\r\n    }\r\n   \r\n    const clearText = () => {  setText(\"\");\r\n    props.showAlert(\"Textarea Cleared\",\"success\");\r\n    }\r\n    const [text,setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className='container'>       \r\n            <div className=\"mb-3\"> \r\n            <h2 >{props.heading}</h2>\r\n            <textarea className=\"form-control\" style={{backgroundColor: props.mode==='dark'? 'grey': 'white', color:props.mode=== 'dark'?'white': 'black'}}\r\n value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}> Covert to Uppercase </button>\r\n            <button className=\"btn btn-primary\" onClick={handleLoClick}> Covert to Lowercase </button>\r\n            \r\n            <button className=\"btn btn-primary mx-2\" onClick={copyText}> Copy Text </button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={removeExtraSpaces}> Remove Extra Spaces </button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={clearText}> Clear Text </button>\r\n        </div>\r\n    \r\n          <div className=\"container my-4\">\r\n            <h1> Text Summary </h1>\r\n            <p> {text.split(\" \").length} words and {text.length-text.split(\" \").length+1} characters</p>\r\n            <p> {0.008*text.split(\" \").length} minutes read</p>\r\n            <h2>Preview</h2>\r\n             <p>{text.length>0?text: \"Enter something in the above textbox to preview it here\"}</p>\r\n\r\n          </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n         const lower=word.toLowerCase();\r\n         return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n          props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`}  role=\"alert\">\r\n                {capitalize(props.alert.type)}! {props.alert.msg}\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n           </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import { BrowserRouter, \n//   Route, \n//   Routes, \n//   Link} \n//   from 'react-router-dom';\n\n\nfunction App() {\n  const[mode, setMode] = useState('light');\n  const[alert,setAlert] = useState(null);\n  const showAlert =(message,type)=>{\n    setAlert({\n       msg: message,\n       type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n  }\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n    document.body.style.backgroundColor = '#044781';\n    \n    document.body.style.color = 'white';\n    showAlert(\"Dark Mode has been enabled\",\"success\");\n    }\n    else{ \n    setMode('light');\n    document.body.style.backgroundColor = 'white';\n    document.body.style.color = 'black';\n    showAlert(\"Light Mode has been enabled\",\"success\");\n    }\n  }\n  return (\n    <>\n    {/* <BrowserRouter> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n     <Alert alert={alert} showAlert={showAlert}/>\n     <div className='container my-4'>\n     \n     {/* <Routes> */}\n     {/* <Route path=\"/about\"  element={<About />} /> */}\n     {/* <Route path=\"/\" element={  } /> */}\n     <TextForm heading=\"Enter the Text\" mode={mode}  alert={alert} showAlert={showAlert}/>\n     {/* </Routes> */}\n     </div>\n    {/* </BrowserRouter> */}\n  </> \n \n\n  );\n}\n\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}